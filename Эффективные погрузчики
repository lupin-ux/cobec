#include <iostream>
#include <vector>
#include <algorithm>

/**
 * Finds the length of the longest palindromic subsequence in a sequence of zones.
 * 
 * This function uses dynamic programming to find the longest palindromic subsequence.
 * Time complexity: O(n²), where n is the length of the sequence
 * Space complexity: O(n²)
 * 
 * @param zones The sequence of zones visited by the forklift
 * @return The length of the longest palindromic subsequence
 */
int longestPalindromicSubsequence(const std::vector<int>& zones) {
    int n = zones.size();
    
    // Edge case: empty sequence or single element
    if (n == 0) return 0;
    if (n == 1) return 1;
    
    // dp[i][j] represents the length of the longest palindromic subsequence
    // of the subsequence zones[i...j]
    std::vector<std::vector<int>> dp(n, std::vector<int>(n, 0));
    
    // A subsequence of length 1 is palindromic by definition
    for (int i = 0; i < n; i++) {
        dp[i][i] = 1;
    }
    
    // Fill the dp table
    // We start with smaller subsequences and gradually increase the length
    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            
            // If the first and last elements are the same, they contribute to a palindrome
            if (zones[i] == zones[j]) {
                // If they're adjacent or there's already a palindrome between them
                dp[i][j] = dp[i + 1][j - 1] + 2;
            } else {
                // Take the maximum of the palindromes without either the first or last element
                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    
    // The result is stored in dp[0][n-1], representing the entire sequence
    return dp[0][n - 1];
}

int main() {
    // Read the number of movement records
    int n;
    std::cin >> n;
    
    // Input validation
    if (n < 1 || n > 10000) {
        std::cerr << "Invalid input: Number of records must be between 1 and 10000." << std::endl;
        return 1;
    }
    
    // Read the sequence of zones
    std::vector<int> zones(n);
    for (int i = 0; i < n; i++) {
        std::cin >> zones[i];
        
        // Input validation for zone numbers
        if (zones[i] < 1 || zones[i] > 1000000000) {
            std::cerr << "Invalid input: Zone numbers must be between 1 and 10^9." << std::endl;
            return 1;
        }
    }
    
    // Find the length of the longest palindromic subsequence
    int result = longestPalindromicSubsequence(zones);
    
    // According to the problem, if the result is less than 2, there's no ideal route
    if (result < 2) {
        result = 0;
    }
    
    // Output the result
    std::cout << result << std::endl;
    
    return 0;
}
